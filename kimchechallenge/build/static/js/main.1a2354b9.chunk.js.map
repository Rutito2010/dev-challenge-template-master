{"version":3,"sources":["Components/byContinent.jsx","Components/byLanguage.jsx","Queries/Queries.jsx","App.js","serviceWorker.js","index.js"],"names":["ByContinent","datita","undefined","map","con","key","name","countries","c","role","aria-label","flag","capital","languages","join","currency","ByLanguages","lan","continent","GET_COUNTRIES","gql","App","useQuery","data","error","loading","useState","filter","setFilter","input","setInput","orderByContintent","setByContintent","orderByLanguage","setByLanguage","placeholder","value","onChange","e","preventDefault","str","keyword","target","charAt","toUpperCase","slice","datita2","_","country","includes","i","length","push","emoji","code","language","j","languageList","uniq","lanAux","continents","continentList","contAux","console","log","handleChange","onClick","handleContinent","handleLanguage","Boolean","window","location","hostname","match","client","ApolloClient","cache","InMemoryCache","uri","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.1a2354b9.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// import _ from \"lodash\";\r\n\r\nconst ByContinent = ({ datita }) => {\r\n  // const { data, error, loading } = useQuery(GET_CONTINENTS);\r\n  // console.log(data);\r\n\r\n  if (datita === null || datita === undefined) {\r\n    return <div> Waiting for keyswords...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>Country List by Continent</p>\r\n        {datita.map((con) => (\r\n          <ul key={con.name}>\r\n            <h2>-{con.name}</h2>\r\n            {con.countries.map((c) => (\r\n              <div key={c.name}>\r\n                <span role=\"img\" aria-label=\"arrow\">\r\n                  {c.flag}\r\n                </span>\r\n                <h3>{c.name}</h3>\r\n                <h4>{c.capital}</h4>\r\n                <h4>{c.languages.join(\" - \")}</h4>\r\n                <h4>{c.currency}</h4>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default ByContinent;\r\n","import React from \"react\";\r\n\r\nexport const ByLanguages = ({ datita }) => {\r\n  // const { data, error, loading } = useQuery(GET_LANGUAGES);\r\n  // console.log(datita);\r\n\r\n  if (datita === null || datita === undefined) {\r\n    return <div> Waiting for keyswords...</div>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <p>Country List by Language</p>\r\n        {datita.map((lan) => (\r\n          <ul key={lan.name}>\r\n            <h2>-{lan.name}</h2>\r\n            {lan.countries.map((c) => (\r\n              <div key={c.name}>\r\n                <span role=\"img\" aria-label=\"arrow\">\r\n                  {c.flag}\r\n                </span>\r\n                <h3>{c.name}</h3>\r\n                <h4>{c.capital}</h4>\r\n                <h4>{c.continent}</h4>\r\n                <h4>{c.currency}</h4>\r\n              </div>\r\n            ))}\r\n          </ul>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n};\r\n","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_CONTINENTS = gql`\r\n  query {\r\n    continents {\r\n      name\r\n      code\r\n    }\r\n  }\r\n`;\r\nexport const GET_COUNTRIES = gql`\r\n  query {\r\n    countries {\r\n      name\r\n      code\r\n      capital\r\n      emoji\r\n      emojiU\r\n      currency\r\n      continent {\r\n        name\r\n      }\r\n      languages {\r\n        name\r\n        code\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const GET_LANGUAGES = gql`\r\n  query {\r\n    languages {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\n// export { GET_CONTINENTS, GET_COUNTRIES, GET_LANGUAGES };\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport _ from \"lodash\";\r\nimport ByContinent from \"./Components/byContinent\";\r\nimport { ByLanguages } from \"./Components/byLanguage\";\r\nimport { GET_COUNTRIES } from \"./Queries/Queries\";\r\n\r\nconst App = () => {\r\n  const { data, error, loading } = useQuery(GET_COUNTRIES);\r\n\r\n  const [filter, setFilter] = useState(true);\r\n\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const [orderByContintent, setByContintent] = useState();\r\n\r\n  const [orderByLanguage, setByLanguage] = useState();\r\n\r\n  const handleChange = (e) => {\r\n    e.preventDefault();\r\n\r\n    function primeraLetraMayus(str) {\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    let keyword = primeraLetraMayus(e.target.value);\r\n    let datita2 = _.filter(data.countries, (country) =>\r\n      country.name.includes(keyword)\r\n    );\r\n    let countries = [];\r\n\r\n    for (let i = 0; i < datita2.length; i++) {\r\n      countries.push({\r\n        name: datita2[i].name,\r\n        continent: datita2[i].continent.name,\r\n        languages: datita2[i].languages.map((e) => e.name),\r\n        capital: datita2[i].capital,\r\n        flag: datita2[i].emoji,\r\n        currency: datita2[i].currency,\r\n        code: datita2[i].code,\r\n      });\r\n    }\r\n    let language = [];\r\n    for (let i = 0; i < countries.length; i++) {\r\n      for (let j = 0; j < countries[i].languages.length; j++)\r\n        language.push(countries[i].languages[j]);\r\n      // console.log(languageList);\r\n    }\r\n    let languageList = _.uniq(language);\r\n    let lanAux = [];\r\n    for (let i = 0; i < languageList.length; i++) {\r\n      lanAux.push({ name: languageList[i], countries: [] });\r\n    }\r\n    for (let i = 0; i < lanAux.length; i++) {\r\n      for (let j = 0; j < countries.length; j++) {\r\n        if (countries[j].languages.includes(lanAux[i].name))\r\n          lanAux[i].countries.push(countries[j]);\r\n      }\r\n    }\r\n\r\n    let continents = [];\r\n    for (let i = 0; i < countries.length; i++) {\r\n      continents.push(countries[i].continent);\r\n    }\r\n    let continentList = _.uniq(continents);\r\n    let contAux = [];\r\n    for (let i = 0; i < continentList.length; i++)\r\n      contAux.push({ name: continentList[i], countries: [] });\r\n    for (let i = 0; i < contAux.length; i++) {\r\n      for (let j = 0; j < countries.length; j++) {\r\n        if (countries[j].continent.includes(contAux[i].name))\r\n          contAux[i].countries.push(countries[j]);\r\n      }\r\n    }\r\n    console.log(contAux);\r\n    setByLanguage(lanAux);\r\n    setByContintent(contAux);\r\n\r\n    setInput(keyword);\r\n  };\r\n  const handleContinent = (e) => {\r\n    e.preventDefault();\r\n    setFilter(true);\r\n  };\r\n  const handleLanguage = (e) => {\r\n    e.preventDefault();\r\n    setFilter(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Country Search</h1>\r\n      <h4>Introduce your country</h4>\r\n      <input\r\n        placeholder=\"Introduce al menos dos (2) caracteres para iniciar la busqueda...\"\r\n        value={input}\r\n        onChange={(e) => {\r\n          handleChange(e);\r\n        }}\r\n      />\r\n      <h2>Group by :</h2>\r\n      <button\r\n        onClick={(e) => {\r\n          handleContinent(e);\r\n        }}\r\n      >\r\n        Continent\r\n      </button>\r\n      <button\r\n        onClick={(e) => {\r\n          handleLanguage(e);\r\n        }}\r\n      >\r\n        Language\r\n      </button>\r\n      {loading || error ? (\r\n        <p>Loading Countries</p>\r\n      ) : filter === true ? (\r\n        <ByContinent datita={orderByContintent} />\r\n      ) : (\r\n        <ByLanguages datita={orderByLanguage} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  uri: \"https://countries.trevorblades.com\",\r\n});\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}